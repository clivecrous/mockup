#!/usr/bin/env ruby	

# Copyright (c) 2009 Cory Ondrejka. All rights reserved.
# See License.txt for licensing details.

#<mockup version="1.0" skin="sketch">
#  <controls>
#    <control controlID="0" controlTypeID="com.balsamiq.mockups::Accordion" x="100" y="31" w="-1" h="-1" zOrder="0" locked="false" isInGroup="-1">
#      <controlProperties>
#        <text>Item%20One%0AItem%20Two%0AItem%20Three%0AItem%20Four</text>
#      </controlProperties>
#    </control>
#    <control controlID="1" controlTypeID="com.balsamiq.mockups::Arrow" x="278" y="31" w="-1" h="-1" zOrder="1" locked="false" isInGroup="-1"/>
#    ...

require "rubygems"
require 'hpricot'

class BalsamiqControlParser
  include Enumerable
  
  def initialize
    load_exporters
  end

  def load_exporters
    libdir = File.dirname(__FILE__)
    pattern = File.join(libdir, "../exporters", "balsamiq2*.rb")
    Dir.glob(pattern).each {|file| require file}
  end
  
  def load_file(file)
    begin
      @xml = File.read(file)
      @controls = []
    rescue Exception
    end
  end
  
  attr_reader :xml

  def xml_parse
    @bdoc = Hpricot::XML(@xml)
  end

  def get_balsamiq_version
    @bdoc.at('mockup')['version']
  end
  
  def get_all_elements
    (@bdoc/"control").each {|control| @controls << BalsamiqControl.new(control)}
  end
  
  def [](element)
    @controls[element]
  end
  
  def dump_symbols_and_examples(basename)
    symbols = []
    File.open("#{File.dirname(__FILE__)}/../symbols/#{basename}-defaults.rb","w") do |file|
      file.puts "\# #{basename}-dump.rb\n"
      file.puts "\# File auto generated by #{$0} on #{Time.now}\n"
      file.puts "\# Used by rspec stories in parse_controls_spec.rb\n"
      file.puts "\n\n\# Control XML\n"
      (@bdoc/"control").each do |el|
        ht = el.to_html
        ht =~ /\"com\.balsamiq\.mockups\:\:(\w+)\"/
        symbol = $1
        symbols << symbol
        file.puts "BalsamiqTestXML#{symbol} = %Q{\n#{ht}}\n\n"
      end
      file.puts "\n\n\# Control Test Data\n"
      @controls.each do |c|
        file.puts "BalsamiqTestData#{c.control[:controlTypeID]} = {\n"
        c.control.each do |k,v|
          if v.class == Symbol
          file.puts "\t:#{k} => :#{v},\n"
          elsif v.class == String
            file.puts "\t:#{k} => \"#{v}\",\n"
          elsif v.class == NilClass
            file.puts "\t:#{k} => nil,\n"
          else
            file.puts "\t:#{k} => #{v},\n"
          end
        end
        file.puts "}\n\n"
      end
    end
    File.open("#{File.dirname(__FILE__)}/../symbols/#{basename}-symbols.rb","w") do |file|
      file.puts "\# #{basename}-symbols.rb\n"
      file.puts "\# File auto generated by #{$0} on #{Time.now}\n"
      file.puts "\n\n\# Control Symbols\n"
      file.puts "BalsamiqControlSymbols = ["
      symbols.each do |s|
        file.puts ":#{s},"
      end
      file.puts "]\n\n"
    end
  end
  
  def choose_exporter(exporttype)
    exportclass = "BalsamiqExport" + exporttype.upcase
    exportclass = self.class.const_get(exportclass)
    exportclass.new
  end
  
  def process_balsamiq(inputfile, exportfile, exporttype)
    load_file(inputfile)
    xml_parse
    get_all_elements
    exporter = choose_exporter(exporttype)
    exporter.start(exportfile)
    @controls.each do |c|
      eval "exporter.export_#{c.control[:controlTypeID]}(c.control)"
    end
    exporter.finish
  end
  
  def process_examples(file, basename = "balsamiq-control")
    load_file(file)
    xml_parse
    get_all_elements
    dump_symbols_and_examples(basename)
  end
end
